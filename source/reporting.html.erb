---
title: Sharethrough Reporting Framework
---
<header class="article">
  <a href="./">
    <img src="images/ic_arrow_back.svg" />
  </a>
</header>
<section class="pageTitle">
  <h2>Designing a new way to understand advertising sales performance</h2>
  <h3>
    The Sharethrough Reporting Framework offers a standardized, goal-oriented way of thinking about ad sales performance.
  </h3>
  <div class="info">
    <div class="point">
      <h4>Date</h4>
      <p>
        January 2016
      </p>
    </div>
    <div class="point">
      <h4>Industry</h4>
      <p>
        Advertising
      </p>
    </div>
    <div class="point">
      <h4>Role</h4>
      <p>
        Design Lead
      </p>
    </div>
    <div class="point">
      <h4>Platform</h4>
      <p>
        Web
      </p>
    </div>
  </div>
</section>
<div class="pageContent">
  <div class="text">
    <h3>Problem</h3>
    <p class="lead">
      As a sales tool, Sharethrough for Publishers offers several dashboards and reports to help publishers understand what they are selling. But each worked a bit differently, terminology varied report to report, and users found the software frustrating to use.
    </p>
    <p>
      Sharethrough operates a two-sided marketplace—a place for advertisers to buy inventory and a place for publishers to put their inventory up for sale. If inventory doesn't perform well, advertisers will stop buying. If advertisers stop buying, publishers will leave. This means we need to control the quality of the ads and the inventory as best we can. As the business scales, this becomes very difficult. It's hard to manage inventory quality across hundreds and hundreds of sites and apps.
    </p>
    <p>
      How might we make it easier for publishers to understand inventory quality and take action themselves? What if we scan the publisher's inventory and send them a note about problems and opportunities?
    </p>
    <p>
      Our objective for this feature was to see if we can build something that got publishers to resolve problems and take opportunities.
    </p>
  </div>

</div>
<div class="pageContent">
  <figure>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    This model tries to visually explain the problem. When a user enters the platform, it's not clear there are problems or opportunities awaiting (the purple bubbles). How can we bring those things to the product surface?
  </figcaption>
</div>
<div class="pageContent">
  <div class="text">
    <h3>The Solution</h3>
    <p>
      We started experimenting with an alerting system. A communication system that matches inventory against a set of criteria and if true, it will create an in-platform alert and send an email to bring the publisher user in to fix it.
    </p>
    <p>
      We worked off the following assumptions:
    </p>
    <ol>
      <li>
        Publisher users would be motivated to take an action to improve their inventory.
      </li>
      <li>
        Publisher users would be able to resolve the alerts they receive.
      </li>
      <li>
        The system wouldn't be too annoying to prevent people from using it.
      </li>
    </ol>
    <p>
      With those assumptions in mind, we set out to build something small and learn about these assumptions.
    </p>
  </div>
</div>
<div class="pageContent">
  <figure>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    This is the concept model we based our first experiment on. In this model, the problems and opportunities are "sensed" by the platform and brought forward to the product surface to a place called the Alert Index. These alerts also trigger an email which also brings the user to the Alert Index. The first experiment didn't have all of these features but it gave us something to work off of.
  </figcaption>
</div>
<div class="pageContent">
  <div class="text">
    <p>
      I began the project by working with product managers, engineers, and the solutions team to think through how the system should work. The solutions team—which works directly with publishers to troubleshoot problems—offered a lot of insight into the major problems that publishers face. With their help, we were able to come up with our first set of problems and opportunities to alert publishers. From these conversations, we also thought about the different kinds of alerts—scheduled and on-demand.
    </p>
    <p>
      During this time, I also worked closely with the lead engineers to think about how the system would actually work based on the concept model.
    </p>
  </div>
</div>
<div class="pageContent">
  <figure>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    This is the user flow for a "Scheduled" alert. These alerts run on a set interval (usually 1 week) and look for criteria in a publisher's inventory to be true. If it is, we send the alert. "Poor Video View Rates" are an example of a scheduled alert. The blue lines indicate the "user" flow through this system.
  </figcaption>
</div>
<div class="pageContent">
  <figure>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    This is the user flow for an On-demand alert. These alerts run when an Alert Object is created. An alert object might be a new floor price recommendation or a new demand partner coming online. When that happens, we want our publishers to know about so they can interact with those things.
  </figcaption>
</div>
<div class="pageContent">
  <div class="text">
    <p>
      With a strong understanding of what we wanted to accomplish and how the system would work, I started designing interfaces and prototyping ideas.
    </p>

  </div>
</div>
<div class="pageContent">
  <figure class="two">
    <div class="image">

    </div>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    An early concept around "Unread" and "Read" alerts. This added unnecessary complexity to the code so we scrapped it.
  </figcaption>
</div>
<div class="pageContent">
  <figure class="two">
    <div class="image">

    </div>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    A "tile" approach that included relevant actions for the alert category. Putting everything in a dropdown made the actions hard to discover.
  </figcaption>
</div>
<div class="pageContent">
  <figure class="two">
    <div class="image">

    </div>
    <div class="image">

    </div>

  </figure>
  <figcaption>
    This approach deviated from the concept model and user flow dramatically. We wondered if the alerts were irrelevant to some users. So we'd let the user decide what to be alerted about. We scrapped this idea but kept it in mind as we experimented.
  </figcaption>
</div>
<div class="pageContent">
  <figure class="">
    <div class="image">

    </div>


  </figure>
  <figcaption>
    The email that publisher users receive when they have an alert. This email is about poor Video View Rates (VVR), a key performance indicator for video ads. So far, we're finding that the email is a great channel for this feature.
  </figcaption>
</div>
<div class="pageContent">
  <figure class="">
    <div class="image">

    </div>


  </figure>
  <figcaption>
    This is the Alerts Index—if you click on the link in the email, you'll end up here. Here you can see what placements are affected by each alert category.
  </figcaption>
</div>
<div class="pageContent">
  <figure class="">
    <div class="image">

    </div>


  </figure>
  <figcaption>
    The Alert icon in the main navigation will show a purple indicator if you have alerts awaiting your inspection.
  </figcaption>
</div>
<div class="pageContent">
  <div class="text">
    <h3>Outcome</h3>
    <p>
      As of May 2017, we've run three experiments with this Alerting system. Each experiment builds upon the previous. We're finding that publishers are actively resolving the problems and opportunities when presented with an alert.
    </p>
  </div>
</div>
<div class="pageContent">
  <figure class="">
    <div class="image">

    </div>


  </figure>
  <figcaption>
    This graph shows resolved Video View Rate alerts over time. In other words, publishers are receiving our alerts and taking action. The alerting system seems to be working.
  </figcaption>
</div>
<div class="pageContent">
  <div class="text">
    <p>
      We applied Mixpanel tracking to our alerting system to track alert resolutions. If the previous week generated an alert but didn't on the current week, we say that it is "resolved." We have to track it like this because you can't click a button in our platform to fix everything. Sometimes it requires you to go into our codebase and move stuff around. It's hard but publishers seem to be motivated. This alerting system gives them visibility into what's wrong and we show them how to fix it.
    </p>
    <p>
      Our next steps (as of July 2017) is to provide some more management tools like unsubscribing. We're also experimenting with more performance alerts like click-through rate.

    </p>
  </div>
</div>
